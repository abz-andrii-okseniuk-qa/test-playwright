class _WotNetwork{formRequest(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=arguments[3];const o=_.merge({},{"Content-type":"application/x-www-form-urlencoded"},s);return this.request(e,t,o,n)}jsonRequest(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=arguments[3];const o=_.merge({},{"Content-Type":"application/json"},s);return this.request(e,t,o,JSON.stringify(n))}request(e,t){let s=arguments[3];return new Request(e,{method:t,headers:new Headers(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}),body:s})}postForm(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const n=this.formRequest(e,"post",s,t);return this.sendRequest(n)}postJson(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const n=this.jsonRequest(e,"post",s,t);return this.sendRequest(n)}get(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const s=this.request(e,"get",t);return this.sendRequest(s)}sendRequest(e){return new Promise((t,s)=>{fetch(e).then(e=>{e.text().then(s=>{const n={status:e.status,responseText:s,headers:e.headers};t(n)}).catch(e=>{})}).catch(e=>{})})}}const WotNetwork=new _WotNetwork;