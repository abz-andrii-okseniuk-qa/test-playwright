class AlarmsManager{constructor(e){this.store=e}async doOnBackgroundStart(){this.initListeners(),this.createPinWotPopupAlarm(),this.createGetUserPlanAlarm(),this.createUpdateBlockedSitesStatisticsDataAlarm(),this.createUpdatePopupScanTimeAlarm()}initListeners(){webextApi.alarms.onAlarm.addListener(async e=>{switch(e.name){case SHOW_PIN_WOT_POPUP_ALARM:var t=await getCurrentTab();const e=t.url,a=t.id;isValidPageForContent(e)?webextApi.tabs.sendMessage(a,{action:SHOW_PIN_WOT_POPUP},e=>{e||this.createPinWotPopupAlarm()}):this.createPinWotPopupAlarm();break;case GET_USER_PLAN_ALARM:this.store.getState().user.isPremiumUser&&this.store.dispatch({type:GET_USER_PLAN});break;case GET_LEAK_DATA_ALARM:this.store.dispatch(getLeakData(!1));break;case OPTOUT_ALARM:this.store.dispatch(OptOutPopUp("timer")),webextApi.action.setBadgeText({text:"1"});break;case SERPS_REQUEST_ALARM:this.store.dispatch(requestSerpsConf());break;case UPDATE_BLOCKED_SITES_STATISTICS_ALARM:updateBlockedSitesStatisticsData();break;case POPUP_UPDATE_SCAN_TIME_ALARM:this.store.dispatch(updatePopupScanTime(new Date))}})}async createPinWotPopupAlarm(){this.createAlarm(SHOW_PIN_WOT_POPUP_ALARM,SHOW_PIN_WOT_POPUP_ALARM_DELAY,!1)}async createUpdatePopupScanTimeAlarm(){this.createAlarm(POPUP_UPDATE_SCAN_TIME_ALARM,POPUP_UPDATE_SCAN_TIME_ALARM_INTERVAL,!0,!0)}async createSerpRequestAlarm(){this.createAlarm(SERPS_REQUEST_ALARM,SERPS_REQUEST_ALARM_DELAY,!0)}async createGetUserPlanAlarm(){this.createAlarm(GET_USER_PLAN_ALARM,GET_USER_PLAN_ALARM_INTERVAL,!0)}async createUpdateBlockedSitesStatisticsDataAlarm(){this.createAlarm(UPDATE_BLOCKED_SITES_STATISTICS_ALARM,UPDATE_BLOCKED_SITES_STATISTICS_ALARM_INTERVAL,!0)}async toggleOptOutAlarm(e){this.toggleAlarm(e,OPTOUT_ALARM,OPTOUT_ALARM_INTERVAL,!0)}async toggleGetLeakDataAlarm(e){this.toggleAlarm(e,GET_LEAK_DATA_ALARM,GET_LEAK_DATA_ALARM_INTERVAL,!0)}async toggleAlarm(e,t,a){let A=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return e?this.createAlarm(t,a,A):this.clearAlarm(t)}async createAlarm(e,t,a){let A=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(await webextApi.alarms.get(e)){if(!A)return;await this.clearAlarm(e)}const r=a?{periodInMinutes:t}:{delayInMinutes:t};return webextApi.alarms.create(e,r)}async clearAlarm(e){return webextApi.alarms.clear(e)}async clearAlarms(){return webextApi.alarms.clearAll()}}