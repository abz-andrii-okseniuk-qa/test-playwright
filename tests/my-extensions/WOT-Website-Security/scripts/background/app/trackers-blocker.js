var _extends=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var s=arguments[e];for(var r in s)Object.prototype.hasOwnProperty.call(s,r)&&(t[r]=s[r])}return t};class TrackerBlocker{constructor(t){this.WOT_RULE_IDENTIFIER=9794,this.extensionId=webextApi.runtime.getURL("").split("://")[1].slice(0,-1),this.store=t;const e=t.getState();this._trackersList=void 0,this._trackersMapping=void 0,this._allowList=e.trackerBlockerData.allowList,this._blockAll=e.trackerBlockerData.allBlocked,this.idToUrlMapping={},this.GETMATCHEDRULES_QUOTA_INTERVAL=10,this.MAX_GETMATCHEDRULES_CALLS_PER_INTERVAL=20,this.requestListener=t=>{if(t&&t.url)try{const e=getCleanDomain(t.url),s=this.trackersList[e];if(!s)return;const r=t.originUrl;let i=t.initiator;if(i=i||r,!i||i.includes(this.extensionId))return;i=getCleanDomain(i||r),this.store.dispatch(trackerDetected(_extends({},s,{initiator:i})));!this.allowList[s.name]&&incrementUserStatisticsData(USER_STATS_DIGITAL_TRACKER_BLOCKED)}catch(t){}},this.start()}get allowList(){return this._allowList||(this._allowList=_extends({},this.store.getState().trackerBlockerData.allowList)),this._allowList}flush(){this._trackersList=void 0,this._trackersMapping=void 0,this._blockAll=void 0,this.flushAllowList()}flushAllowList(){this._allowList=void 0,this.start()}get blockAll(){return void 0===this._blockAll&&(this._blockAll=_extends({},this.store.getState().trackerBlockerData.allBlocked)),this._blockAll}get trackersList(){return this._trackersList||(this._trackersList=this.store.getState().trackerBlockerData.list),this._trackersList}get trackersMapping(){return!this._trackersMapping&&this.trackersList&&(this._trackersMapping={},Object.keys(this.trackersList).forEach(t=>{const e=this.trackersList[t];this._trackersMapping[e.name]=e.url})),this._trackersMapping}start(){IS_DEV&&chrome.declarativeNetRequest.onRuleMatchedDebug.addListener(t=>{}),this.clearRules().then(t=>{IS_DEV&&console.log("TEST: removedRulesIds => "+JSON.stringify(t)),this.addRules().then(t=>{IS_DEV&&console.log("TEST: addedRules => "+JSON.stringify(t)),this.idToUrlMapping=t,webextApi.webRequest.onBeforeRequest.addListener(this.requestListener,{urls:["*://*/*"]})}).catch(t=>{IS_DEV&&console.log("TEST: "+t)})}).catch(t=>{IS_DEV&&console.log("TEST: "+t)})}createBlockingRule(t,e){return{id:t,priority:1,condition:{urlFilter:`*${e}*`,resourceTypes:["main_frame","sub_frame","script"]},action:{type:"block"}}}addRules(){return new Promise((t,e)=>{const s=Object.keys(this.allowList).filter(t=>!this.allowList[t]);if(!s||0==s.length)return t({}),void 0;const r=s.map(t=>this.trackersMapping[t]).filter(t=>void 0!==t);let i={};var l=0;const a=r.map(t=>{const e=this.urlToRuleId(t,l++);return i[e]=t,this.createBlockingRule(e,t)});webextApi.declarativeNetRequest.updateDynamicRules({addRules:a},()=>{chrome.runtime.lastError?e(chrome.runtime.lastError.message):t(i)})})}clearRules(){return webextApi.webRequest.onBeforeRequest.removeListener(this.requestListener),new Promise((t,e)=>{webextApi.declarativeNetRequest.getDynamicRules(s=>{if(s.length>0){const r=s.filter(t=>this.isWotRuleID(t.id)).map(t=>t.id);webextApi.declarativeNetRequest.updateDynamicRules({removeRuleIds:r},()=>{chrome.runtime.lastError?e(chrome.runtime.lastError.message):(this.idToUrlMapping={},t(r))})}else t([])})})}urlToRuleId(t,e){let s=t.length;return Array.from(t).forEach(t=>{s+=t.charCodeAt()+e}),Math.floor(1e4*s+this.WOT_RULE_IDENTIFIER)}isWotRuleID(t){const e=t.toString();if(e.length>4){if(e.substring(e.length-4,e.length)===this.WOT_RULE_IDENTIFIER.toString())return!0}return!1}}